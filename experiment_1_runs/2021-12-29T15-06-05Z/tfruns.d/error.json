{
  "message": "RuntimeError: Evaluation error: unique() applies only to vectors.",
  "traceback": ["py_call_impl(callable, dots$args, dots$keywords)", "(structure(function (...) \n{\n    dots <- py_resolve_dots(list(...))\n    result <- py_call_impl(callable, dots$args, dots$keywords)\n    if (convert) \n        result <- py_to_r(result)\n    if (is.null(result)) \n        invisible(result)\n    else result\n}, class = c(\"python.builtin.method\", \"python.builtin.object\"\n), py_object = <environment>))(optimizer = \"adam\", loss = \"categorical_crossentropy\", \n    metrics = list(\"accuracy\", function (y_true, y_pred) \n    {\n        table <- table(y_true, y_pred)\n        TP <- table[2, 2]\n        FP <- table[2, 1]\n        precision <- TP/(TP + FP)\n        return(precision)\n    }, function (y_true, y_pred) \n    {\n        table <- table(y_true, y_pred)\n        TP <- table[2, 2]\n        FN <- table[1, 2]\n        recall <- TP/(TP + FN)\n        return(recall)\n    }, function (y_true, y_pred) \n    {\n        precision <- precision(y_true, y_pred)\n        recall <- recall(y_true, y_pred)\n        f1_score <- (2 * precision * recall)/(precision + recall)\n        return(f1_score)\n    }, function (y_true, y_pred) \n    {\n        table <- table(y_true, y_pred)\n        TP <- table[2, 2]\n        P <- sum(table[2, ])\n        TN <- table[1, 1]\n        N <- sum(table[1, ])\n        balanced_accuracy <- (TP/P + TN/N)/2\n        return(balanced_accuracy)\n    }))", "do.call(object$compile, args)", "compile.keras.engine.training.Model(., loss = \"categorical_crossentropy\", \n    optimizer = \"adam\", metrics = list(\"accuracy\", precision, \n        recall, f1_score, balanced_accuracy))", "compile(., loss = \"categorical_crossentropy\", optimizer = \"adam\", \n    metrics = list(\"accuracy\", precision, recall, f1_score, balanced_accuracy))", "model %>% compile(loss = \"categorical_crossentropy\", optimizer = \"adam\", \n    metrics = list(\"accuracy\", precision, recall, f1_score, balanced_accuracy))", "eval(ei, envir)", "eval(ei, envir)", "withVisible(eval(ei, envir))", "tuning_run(\"experiment_1.R\", flags = list(batch_size = c(5, 10), \n    epochs = c(3, 5), dense_units = c(32)))"]
}
